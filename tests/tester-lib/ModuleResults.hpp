/**
 * Copyright (C) 2024-2025 Gianmarco Lenzi
 *
 * @file ModuleResults.hpp
 * @author Gianmarco Lenzi
 * @brief Header for module results class.
 */

#pragma once
#include "common.hpp"

#include "TestResults.hpp"

namespace TesterLib {
    /**
     * @brief Class for storing module results.
     */
    class ModuleResults {
        private:
            /**
             * @brief The results of the tests in the module.
             */
            std::unordered_map<std::string, const TestResults &> tests;

            /**
             * @brief The total number of tests in the module.
             */
            unsigned total = 0;

            /**
             * @brief The number of passed tests in the module.
             */
            unsigned passed = 0;

            /**
             * @brief The fails generated by the module.
             */
            ModuleFails fails;

            /**
             * @brief The warnings generated by the module.
             */
            ModuleWarnings warnings;

            /**
             * @brief Updates the total count of tests, the count of passed tests, and the warnings for the module.
             * @details This function iterates over all the tests in the module, calculating the total number of tests,
             * the number of tests that passed, and aggregating all warnings generated by each test into
             * the module's warnings.
             */
            void update_totals() {
                // Set the total number of tests.
                this->total = this->tests.size();

                // Initialize the number of passed tests, failure messages, and warnings.
                this->passed = 0;
                this->fails = {};
                this->warnings = {};

                // Set the number of passed tests and warnings generated by the module.
                for (const auto &[test_name, test_results] : this->tests) {
                    if (test_results.get_passed()) {
                        // If the test passed, increment the passed tests.
                        this->passed++;
                    } else {
                        // Otherwise, set the failure message.
                        this->fails[test_name] = *test_results.get_failure_message();
                    }

                    if (!test_results.get_warnings().empty()) {
                        // If the test has warnings, add them to the module's warnings.
                        this->warnings[test_name] = test_results.get_warnings();
                    }
                }
            }
        public:
            /**
             * @brief Constructor.
             */
            ModuleResults() = default;

            /**
             * @brief Constructor.
             * @param tests The results of the tests in the module.
             */
            explicit ModuleResults(std::unordered_map<std::string, const TestResults&> tests) : tests(std::move(tests)) {
                update_totals();
            }

            /**
             * @brief Adds a test result to the module results.
             * @param test_name The name of the test.
             * @param test_result The test result.
             */
            void add_test(const std::string &test_name, const TestResults &test_result) {
                this->tests.insert({test_name, test_result});
                update_totals();
            }

            /**
             * @brief Gets the total number of tests in the module.
             * @return The total number of tests in the module.
             */
            [[nodiscard]] [[nodiscard]] unsigned get_total() const { return total; }

            /**
             * @brief Gets the number of tests in the module that passed.
             * @return The number of tests in the module that passed.
             */
            [[nodiscard]] unsigned get_passed() const { return passed; }

            /**
             * @brief Gets the failure messages of the tests in the module.
             * @return The failure messages of the tests in the module.
             */
            [[nodiscard]] ModuleFails get_fails() const { return fails; }

            /**
             * @brief Gets the warnings generated by the module.
             * @return The warnings generated by the module.
             */
            [[nodiscard]] ModuleWarnings get_warnings() const { return warnings; }
    };

} // TesterLib
