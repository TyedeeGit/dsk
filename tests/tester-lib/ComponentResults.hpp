/**
 * Copyright (C) 2024-2025 Gianmarco Lenzi
 *
 * @file ComponentResults.hpp
 * @author Gianmarco Lenzi
 * @brief Header for component results class.
 */

#pragma once
#include "common.hpp"

#include "ModuleResults.hpp"

namespace TesterLib {
    /**
     * @brief Class for storing component results.
     */
    class ComponentResults {
        private:
            /**
             * @brief The results of the tests in the component.
             */
            std::unordered_map<std::string, const ModuleResults &> module_results;

            /**
             * @brief The total number of tests in the component.
             */
            unsigned total_tests = 0;

            /**
             * @brief The number of tests that passed in the component.
             */
            unsigned passed_tests = 0;

            /**
             * @brief The total number of modules in the component.
             */
            unsigned total_modules = 0;

            /**
             * @brief The number of modules that fully passed in the component.
             */
            unsigned passed_modules = 0;

            /**
             * @brief The fails generated by the component.
             */
            ComponentFails fails;

            /**
             * @brief The warnings generated by the component.
             */
            ComponentWarnings warnings;

            /**
             * @brief Updates the total count of tests, the count of passed tests, the total and passed modules, and the warnings for the component.
             * @details This function iterates over all the modules in the component, calculating the total number of tests,
             * the number of tests that passed, the total number of modules, the number of modules that fully passed, and
             * aggregating all warnings generated by each module into the component's warnings.
             */
            void update_totals() {
                // Initialize the number of total/passed tests and modules.
                this->total_tests = 0;
                this->passed_tests = 0;
                this->total_modules = 0;
                this->passed_modules = 0;

                // Initialize the fails and warnings.
                this->fails = {};
                this->warnings = {};

                // ReSharper disable once CppUseStructuredBinding
                for (const auto &module : this->module_results) {
                    // Add to the total and passed tests.
                    this->total_tests += module.second.get_total();
                    this->passed_tests += module.second.get_passed();

                    // Increment the total modules.
                    this->total_modules++;

                    // If the module fully passed, increment the passed modules.
                    if (module.second.get_passed() == module.second.get_total()) {
                        this->passed_modules++;
                    }

                    // Add the fails generated by the module.
                    this->fails[module.first] = module.second.get_fails();

                    // Add the warnings generated by the module.
                    this->warnings[module.first] = module.second.get_warnings();
                }
            }

        public:
            /**
             * @brief Constructor.
             */
            ComponentResults() = default;

            /**
             * @brief Constructor.
             * @param module_results A map of module names to their corresponding test results.
             * @details Initializes the component with the provided module results and updates
             * the totals for tests, modules, and warnings.
             */
            explicit
            ComponentResults(std::unordered_map<std::string, const ModuleResults &> module_results) : module_results(
                std::move(module_results)) { this->update_totals(); }

            /**
             * @brief Adds a module to the component results.
             * @param module_name The name of the module to add.
             * @param module_results The results of the tests in the module.
             */
            void add_module(const std::string &module_name, const ModuleResults &module_results) {
                this->module_results.insert({module_name, module_results});
                this->update_totals();
            }
            /**
             * @brief Gets the total number of tests in the component.
             * @return The total number of tests in the component.
             */
            [[nodiscard]] unsigned get_total_tests() const { return this->total_tests; }

            /**
             * @brief Gets the number of tests that passed in the component.
             * @return The number of tests that passed in the component.
             */
            [[nodiscard]] unsigned get_passed_tests() const { return this->passed_tests; }

            /**
             * @brief Gets the total number of modules in the component.
             * @return The total number of modules in the component.
             */
            [[nodiscard]] unsigned get_total_modules() const { return this->total_modules; }

            /**
             * @brief Gets the number of modules that fully passed in the component.
             * @return The number of modules that fully passed in the component.
             */
            [[nodiscard]] unsigned get_passed_modules() const { return this->passed_modules; }

            /**
             * @brief Gets the fails generated by the component.
             * @return The fails generated by the component.
             */
            [[nodiscard]] ComponentFails get_fails() const { return this->fails; }

            /**
             * @brief Gets the warnings generated by the component.
             * @return The warnings generated by the component.
             */
            [[nodiscard]] ComponentWarnings get_warnings() const { return this->warnings; }
    };

} // TesterLib
